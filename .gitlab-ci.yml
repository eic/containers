image: eicweb.phy.anl.gov:4567/containers/image_recipes/ubuntu_dind:latest

stages:
  - builder
  - config
  - slim
  - singularity

## We use minimal file artifacts to transport variables between job
## stages, such as the branch we are working on and the need for 
## caching.
## By evaluating these files in the before_script, we can set
## relevant environment variables before our pipelines run
default:
  artifacts:
    paths: 
      - .ci-env
      - config
  before_script:
    - mkdir -p .ci-env
    - if [ -f .ci-env/release ]; then 
        export BRANCH='release'
        export SINGULARITY_DEF='eic-latest.def'
      elif [ -f .ci-env/develop ]; then
        export BRANCH='develop'
        export SINGULARITY_DEF='eic-unstable.def'
      else export BRANCH='UNKNOWN'
      fi
    - if [ -f .ci-env/builder-nc ]; then 
        export BUILDER_TARGET="${BRANCH}"
      else
        export BUILDER_TARGET="${BRANCH}-cached"
      fi
    - if [ -f .ci-env/release-nc ]; then 
        export RELEASE_TARGET="${BRANCH}"
      else
        export RELEASE_TARGET="${BRANCH}-cached"
      fi

## Stable or unstable branch?
init:stable:
  stage: .pre
  rules:
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "master"'
      when: always
  script:
    - touch .ci-env/release
init:unstable:
  stage: .pre
  rules:
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != "master"'
      when: always
  script:
    - touch .ci-env/develop
init:builder-nc:
  stage: .pre
  rules:
    - changes:
        - containers/builder/Dockerfile
        - containers/builder/spack.yaml
        - spack/packages/**/*
  script:
    - touch .ci-env/builder-nc
init:release-nc:
  stage: .pre
  rules:
    - changes:
        - containers/release/Dockerfile.in
        - containers/release/configure_release.sh
  script:
    - touch .ci-env/release-nc

builder:
  stage: builder
  tags:
    - silicon
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH != "develop"'
      when: on_success
  script:
    - cp -r spack containers/builder/np-spack
    - cd containers/builder
    - head Dockerfile
    - make login
    - make ${BUILDER_TARGET}

config:stable:
  image: eicweb.phy.anl.gov:4567/containers/eic_container/eic_builder:latest
  stage: config
  tags:
    - silicon
  only:
    - tags
    - master
  script:
   - bash containers/release/configure_release.sh latest
config:unstable:
  image: eicweb.phy.anl.gov:4567/containers/eic_container/eic_builder:unstable
  stage: config
  tags:
    - silicon
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH != "develop"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
  script:
    - bash containers/release/configure_release.sh unstable
      
release:
  stage: slim
  tags:
     - silicon
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH != "develop"'
      when: manual
  script:
     - cp config/Dockerfile containers/release/Dockerfile
     - cp config/eic-env.sh containers/release/eic-env.sh
     - cd containers/release
     - make login
     - make ${RELEASE_TARGET}

release:singularity:
  stage: singularity
  tags:
     - silicon
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: manual
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH != "develop"'
      when: manual
  needs: ["release:stable"]
  script:
     - cp containers/release/${SINGULARITY_DEF} eic.def
     - /bin/bash .gitlabci/setup.sh
     - /bin/bash .gitlabci/build.sh eic.def
     - mkdir -p build 
     - cp eic.sif build/.
     - cp eic.def build/.
  artifacts:
      expire_in: 90 days
      paths:
        - build/eic.sif
        - build/eic.def
