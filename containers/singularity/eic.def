Bootstrap: docker
From: eicweb.phy.anl.gov:4567/containers/eic_container/eic_container:latest

%help
  EIC software container.
  Tools:
     - root        : root version used for the analyzer
     - rootls, rootbrowse, root-config, hadd, h2root
     - dd4hep

%labels
  Maintainer "Whitney Armstrong"
  Version v1.0

%post -c /bin/bash
  #export PYTHONPATH=/usr/local/lib:$PYTHONPATH  
  #export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  #export PATH=/usr/local/bin:$PATH  
  #source /usr/local/bin/thisroot.sh 
  #echo "  -------------------------------------------------"
  #echo "  0. Installing project dependencies"
  #echo "  -------------------------------------------------"
  #apt-get install libtbb-dev libtbb2
  ### this line fixes the ROOT cmake TBB bug
  #sed -i 's/\/tmp\/builds\/root_build\/lib\/libtbb.so/\/usr\/local\/lib\/libtbb.so/g' /usr/local/cmake/ROOTConfig-targets.cmake
  #export EPICS_ROOT=/usr/local/epics
  #export EPICS_BASE=/usr/local/epics/base
  #export EPICS_HOST_ARCH=linux-x86_64
  #export PATH=$EPICS_ROOT/bin:$PATH
  #export LD_LIBRARY_PATH=$EPICS_ROOT/lib:$LD_LIBRARY_PATH
  #export PATH=$EPICS_BASE/bin/$EPICS_HOST_ARCH:$PATH
  #export LD_LIBRARY_PATH=$EPICS_BASE/lib/$EPICS_HOST_ARCH:$LD_LIBRARY_PATH
  #echo "  -------------------------------------------------"
  #echo "  1. Installing project library: libfmt"
  #echo "  -------------------------------------------------"
  #cd /tmp
  #git clone https://github.com/fmtlib/fmt.git && cd fmt && \
  #  git checkout 5.3.0 && mkdir /tmp/build && cd /tmp/build && \
  #  cmake -DBUILD_SHARED_LIBS=TRUE ../fmt &&
  #  make -j20 install 
  #cd /tmp && rm -r /tmp/build && rm -r /tmp/fmt
  #echo "  -------------------------------------------------"
  #echo "  2. Installing project library: nlohmann/json"
  #echo "  -------------------------------------------------"
  #apt-get install nlohmann-json-dev
  #echo "  -------------------------------------------------"
  #echo "  3. Installing: eic/EVIO"
  #echo "  -------------------------------------------------"
  #cd /tmp
  #git clone https://eicweb.phy.anl.gov/jlab/hallc/analyzer_software/eic_evio.git \
  #  && cd eic_evio && git checkout v4.4.6 \
  #  && mkdir build && cd build  \
  #  && cmake ../.  && make -j20 && make install
  #cd /tmp && rm -rf eic_evio
  #echo "  -------------------------------------------------"
  #echo "  4. Installing: Coda/ET"
  #echo "  -------------------------------------------------"
  #cd /tmp
  #git clone https://eicweb.phy.anl.gov/jlab/coda/et.git \
  #  && cd et && git checkout v12.0.1 \
  #  && mkdir build && cd build  \
  #  && cmake ../. -DINSTALL_LMOD_FILES=OFF && make -j20 && make install
  #cd /tmp && rm -rf et
  #echo "  -------------------------------------------------"
  #echo "  5. Installing: Podd"
  #echo "  -------------------------------------------------"
  #cd /tmp 
  #git clone https://eicweb.phy.anl.gov/jlab/hallc/analyzer_software/analyzer.git \
  #  && cd analyzer && git checkout v1.8.2 \
  #  && mkdir build && cd build \
  #  && cmake ../.  && make -j20 && make install 
  #cd /tmp  && rm -rf analyzer
  #echo "  -------------------------------------------------"
  #echo "  6. Installing: hcana"
  #echo "  -------------------------------------------------"
  #cd /tmp && rm -rf hcana
  #git clone https://eicweb.phy.anl.gov/jlab/hallc/analyzer_software/hcana.git \
  #  && cd hcana && git checkout v1.1.9 \
  #  && mkdir build && cd build  \
  #  && cmake ../.  && make -j20 && make install
  #cd /tmp && rm -rf hcana 
  #echo "  -------------------------------------------------"
  #echo "  7. Installing: hconline"
  #echo "  -------------------------------------------------"
  #cd /tmp && rm -rf hconline
  #git clone https://eicweb.phy.anl.gov/jlab/hallc/analyzer_software/hconline.git \
  #  && cd hconline && git checkout v1.1.5 \
  #  && mkdir build && cd build  \
  #  && cmake ../.  && make -j20 && make install
  #cd /tmp && rm -rf hconline 
  #echo "  -------------------------------------------------"
  #echo "  8. Installing: hallc_tools"
  #echo "  -------------------------------------------------"
  #cd /tmp && rm -rf hallc_tools
  #git clone https://eicweb.phy.anl.gov/jlab/hallc/analyzer_software/hallc_tools.git \
  #  && cd hallc_tools && git checkout v1.0.0 \
  #  && mkdir build && cd build  \
  #  && cmake ../.  && make -j20 && make install
  #cd /tmp && rm -rf hallc_tools 
  #echo "  -------------------------------------------------"
  #echo "  9. Installing: simc"
  #echo "  -------------------------------------------------"
  #cd /tmp
  #git clone --recurse-submodules https://eicweb.phy.anl.gov/jlab/hallc/simulation/simc-file-input.git \
  #  && cd simc-file-input && git checkout v1.0.0 && cd - \
  #  mkdir build && cd build && cmake ../simc-file-input && make -j4 install
  #cd /tmp && rm -rf build simc-file-input
  #echo "  -------------------------------------------------"
  #echo "  10. Slimming down image"
  #echo "  -------------------------------------------------"
  #apt-get clean
  #rm -rf /var/lib/apt/lists/*
  echo " Image build is now mostly done in dockerfile"
  echo "  -------------------------------------------------"
  echo "  ===> Image setup complete"
  echo "  -------------------------------------------------"

# ===================================
# GLOBAL
# ===================================

%environment -c /bin/bash
  export PYTHONPATH=/usr/local/lib:$PYTHONPATH
  export PATH=/usr/loca/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include
  export EPICS_ROOT=/usr/local/epics
  export EPICS_BASE=/usr/local/epics/base
  export EPICS_HOST_ARCH=linux-x86_64
  export PATH=$EPICS_ROOT/bin:$PATH
  export LD_LIBRARY_PATH=$EPICS_ROOT/lib:$LD_LIBRARY_PATH
  export PATH=$EPICS_BASE/bin/$EPICS_HOST_ARCH:$PATH
  export LD_LIBRARY_PATH=$EPICS_BASE/lib/$EPICS_HOST_ARCH:$LD_LIBRARY_PATH

%runscript
  echo "Launching a shell in the Hall A/C container."
  echo "Use through singularity apps recommended (see help for more info)."
  exec bash

# ===================================
# SIMC
# ===================================
%apprun simc
  simc "%@"

%appenv simc
  export PYTHONPATH=/usr/local/lib:$PYTHONPATH
  export PATH=/usr/loca/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include

# =======================
# root
# =======================
%apprun root
  root "$@"

%appenv root
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana
  export EPICS_ROOT=/usr/local/epics
  export EPICS_BASE=/usr/local/epics/base
  export EPICS_HOST_ARCH=linux-x86_64
  export PATH=$EPICS_ROOT/bin:$PATH
  export LD_LIBRARY_PATH=$EPICS_ROOT/lib:$LD_LIBRARY_PATH
  export PATH=$EPICS_BASE/bin/$EPICS_HOST_ARCH:$PATH
  export LD_LIBRARY_PATH=$EPICS_BASE/lib/$EPICS_HOST_ARCH:$LD_LIBRARY_PATH

# =======================
# analyzer
# =======================
%apprun analyzer
  analyzer "$@"

%appenv analyzer
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana
  export EPICS_ROOT=/usr/local/epics
  export EPICS_BASE=/usr/local/epics/base
  export EPICS_HOST_ARCH=linux-x86_64
  export PATH=$EPICS_ROOT/bin:$PATH
  export LD_LIBRARY_PATH=$EPICS_ROOT/lib:$LD_LIBRARY_PATH
  export PATH=$EPICS_BASE/bin/$EPICS_HOST_ARCH:$PATH
  export LD_LIBRARY_PATH=$EPICS_BASE/lib/$EPICS_HOST_ARCH:$LD_LIBRARY_PATH

# =======================
# hcana
# =======================
%apphelp hcana
  Run the Hall-C analyzer with same root-style arguments.

%apprun hcana
  hcana "$@"

%appenv hcana
  export DB_DIR=DBASE
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOTSYS=/usr/local
  export ROOT_INCLUDE_PATH=/usr/local/include
  export EPICS_ROOT=/usr/local/epics
  export EPICS_BASE=/usr/local/epics/base
  export EPICS_HOST_ARCH=linux-x86_64
  export PATH=$EPICS_ROOT/bin:$PATH
  export LD_LIBRARY_PATH=$EPICS_ROOT/lib:$LD_LIBRARY_PATH
  export PATH=$EPICS_BASE/bin/$EPICS_HOST_ARCH:$PATH
  export LD_LIBRARY_PATH=$EPICS_BASE/lib/$EPICS_HOST_ARCH:$LD_LIBRARY_PATH

# =======================
# root-config
# =======================
%apprun root-config
  root-config "$@"

%appenv root-config
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana


# =======================
# rootbrowse
# =======================
%apprun rootbrowse
  rootbrowse "$@"

%appenv rootbrowse
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana

# =======================
# rootls
# =======================
%apprun rootls
  rootls "$@"

%appenv rootls
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana

# =======================
# hadd
# =======================
%apprun hadd
  hadd "$@"

%appenv hadd
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana

# =======================
# h2root
# =======================
%apprun h2root
  h2root "$@"

%appenv h2root
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana

# =======================
# xml2evio
# =======================
%apprun xml2evio
  xml2evio "$@"

%appenv xml2evio
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana

# =======================
# evio2xml
# =======================
%apprun evio2xml
  evio2xml "$@"

%appenv evio2xml
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana

# =======================
# evioCat
# =======================
%apprun evioCat
  evioCat "$@"

%appenv evioCat
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana

# =======================
# eviocopy
# =======================
%apprun eviocopy
  eviocopy "$@"

%appenv eviocopy
  export PYTHONPATH=/usr/local/lib:${PYTHONPATH}
  export PATH=/usr/local/bin:${PATH}
  export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
  export ROOT_INCLUDE_PATH=/usr/local/include/podd:/usr/local/include/hcana
